{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getUsers","userId","fetch","then","response","json","TodoList","state","todos","searchQuery","todosFilterValue","a","this","setState","props","selectUser","selectedUserId","todosToDisplay","filter","todo","title","toLowerCase","includes","completed","className","type","placeholder","value","onChange","event","target","map","classNames","checked","readOnly","onClick","id","React","Component","CurrentUser","user","loadUser","currentUserId","prevProps","clearSelectedUser","name","email","phone","App","clearCurrentUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.75401e0d.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTodos = (): Promise<Todo[]> => {\n  return fetch(`${BASE_URL}/todos`)\n    .then(response => response.json());\n};\n\nexport const getUsers = (userId:number) => {\n  return fetch(`${BASE_URL}/users/${userId}`)\n    .then(response => response.json());\n};\n","/* eslint-disable jsx-a11y/label-has-associated-control */\nimport React from 'react';\nimport classNames from 'classnames';\nimport './TodoList.scss';\n\nimport { getTodos } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  selectUser: (id:number) => void;\n};\n\ntype State = {\n  todos: Todo[],\n  searchQuery: string;\n  todosFilterValue: string;\n};\n\nexport class TodoList extends React.Component <Props, State> {\n  state: State = {\n    todos: [],\n    searchQuery: '',\n    todosFilterValue: 'all',\n  };\n\n  async componentDidMount() {\n    const todos = await getTodos();\n\n    this.setState({ todos });\n  }\n\n  render() {\n    const { todos, searchQuery, todosFilterValue } = this.state;\n    const { selectUser, selectedUserId } = this.props;\n\n    const todosToDisplay = todos.filter(todo => {\n      if (!todo.title.toLowerCase().includes(searchQuery.toLowerCase())) {\n        return false;\n      }\n\n      if (todosFilterValue === 'active' && todo.completed) {\n        return false;\n      }\n\n      return !(todosFilterValue === 'completed' && !todo.completed);\n    });\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__listÐ¡ontainer\">\n          <form className=\"TodoList__form\">\n            <input\n              className=\"TodoList__input TodoList__input--search\"\n              type=\"text\"\n              placeholder=\"Search\"\n              value={searchQuery}\n              onChange={event => (\n                this.setState({ searchQuery: event.target.value })\n              )}\n            />\n            <select\n              className=\"TodoList__input TodoList__input--select\"\n              onChange={event => (\n                this.setState({ todosFilterValue: event.target.value })\n              )}\n            >\n              <option value=\"all\">All</option>\n              <option value=\"active\">Active</option>\n              <option value=\"completed\">Completed</option>\n            </select>\n          </form>\n          <ul className=\"TodoList__list\">\n            {todosToDisplay.map(todo => (\n              <li\n                key={todo.id}\n                className={\n                  classNames(\n                    'TodoList__item',\n                    { 'TodoList__item--unchecked': !todo.completed },\n                  )\n                }\n              >\n                <label>\n                  <input\n                    checked={todo.completed}\n                    type=\"checkbox\"\n                    readOnly\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  type=\"button\"\n                  className={classNames('TodoList__user-button', 'button',\n                    `TodoList__user-button--${selectedUserId === todo.userId ? 'selected' : 'unselected'\n                    }`)}\n                  onClick={() => selectUser(todo.userId)}\n                >\n                  {`User ${todo.userId}`}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\nimport { getUsers } from '../../api/api';\n\ntype Props = {\n  currentUserId: number,\n  clearSelectedUser: () => void,\n};\n\ntype State = {\n  user: User | null,\n};\n\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  componentDidMount() {\n    if (this.props.currentUserId !== 0) {\n      this.loadUser();\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (prevProps.currentUserId !== this.props.currentUserId) {\n      this.loadUser();\n    }\n  }\n\n  loadUser = async () => {\n    try {\n      const user = await getUsers(this.props.currentUserId);\n\n      this.setState({ user });\n    } catch (error) {\n      this.setState({ user: null });\n    }\n  };\n\n  render() {\n    const { user } = this.state;\n    const { currentUserId, clearSelectedUser } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:\n            {' '}\n            {currentUserId}\n          </span>\n        </h2>\n        {user ? (\n          <>\n            <h3 className=\"CurrentUser__name\">{user.name}</h3>\n            <p className=\"CurrentUser__email\">{user.email}</p>\n            <p className=\"CurrentUser__phone\">{user.phone}</p>\n\n            <button\n              className=\"CurrentUser__button button\"\n              type=\"button\"\n              onClick={clearSelectedUser}\n            >\n              Clear\n            </button>\n          </>\n        ) : (\n          <p>\n            Cannot find this user\n          </p>\n        )}\n      </div>\n    );\n  }\n}\n","/* eslint-disable no-console */\n\nimport React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 1,\n  };\n\n  selectUser = (id: number) => {\n    this.setState({ selectedUserId: id });\n  };\n\n  clearCurrentUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedUserId={selectedUserId}\n            selectUser={this.selectUser}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                currentUserId={selectedUserId}\n                clearSelectedUser={this.clearCurrentUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}